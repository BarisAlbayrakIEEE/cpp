/// <summary>
/// 
/// SUMMARY:
/// THIS REPOSITORY CONTAINS THREE SOLUTIONS FOR A PRIMITIVE GEOMETRY LIBRARY:
///     1. GeometryLibrary_OCCT:
///         See the readme file (or the docstring of the GeometryObject header file) in GeometryLibrary_OCCT
///     2. GeometryLibrary_CPP11:
///         The solution with C++11 and C++14
///         See below with heading 'A. GeometryLibrary_CPP11'
///     3. GeometryLibrary_MultiThread:
///         An updated version of GeometryLibrary_CPP11 to cover a solution supporting the multi threading.
///         See the readme file (or the docstring of the GeometryObject header file) in GeometryLibrary_MultiThread
/// 
/// THE DESCRIPTIONS ABOUT THE LIBRARY IS BELOW WITH HEADING 'B. DEFINITION OF THE GEOMETRY LIBRARY'
/// 
/// 
/// 
/// CAUTION:
///     GeometryLibrary_OCCT is a quite old version created at the beginning (2019-2020) of this project.
///     Updates made on the GeometryLibrary_CPP11 have rarely been reflected on that item (GeometryLibrary_OCCT).
///     The worst is that even any update is applied, the updated function has not been unit tested.
///     Hence, the code is not stable currently.
///     However, the aim of that library was basicaly to examine C++98 features
///     especially the smart pointers generated by the developers (OCCT Standard_Handle class) with C++98.
///     A comparison of C++98 smart pointers with the C++11 standards (std::shared_ptr and std::unique_ptr)
///     will be reported in the future.
/// 
/// 
/// 
/// A. GeometryLibrary_CPP11
/// 
/// The main purpose of this library is to introduce C++11 and later semantics into Geometry Library.
/// Followings are the key points for this library:
///     1. The whole library is created based on the RAII idiom.
///        The approach to achieve this is the use of smart pointers which deal with the object destruction.
///        The new operator is used only once in GlobalCoordSystem singleton static function
///        together with the shared pointer constructor.
///        The library does not use resources like I/O streams or data structures with a large number of elements.
///        
///        However, in order to have a well-established code in terms of RAII
///        a strong guarantee for the exception safety is required to eliminate all memory leaks.
///        Although the library does not deal with significant resources
///        std::string, std::array and std::vector are used with a very small size.
///        For example, the point coordinates are stored in a std::array with 3 elements.
///        Some of the operations on these data structures (e.g. copy or push_back) throw exception.
///        Hence, the functions dealing with these resources shall be designed to supply
///        at least the basic exception guarantee.
///        More detailed study for each function to have a strong exception gurantee
///        WILL BE PERFORMED IN GeometryLibrary_MultiThread LIBRARY.
///        Additionally, tools like Copy & Swap idiom will also be utilized
///        especially for the special functions to improve the thread safety together with the exception safety.
///     2. The side effects must be considered together with the exception safety and memory leaks.
///        as they may cause problems even a strong exception guarantee is achieved.
///        In the case of this library,
///        the static counter for the objects (GeometryObject::c_IDCounter)
///        can be the main source of the side effects.
///        The counter is incremented everytime a GeometryObject is created.
///        Hence, in order to prevent the side effects caused by the static counter
///        it should be decremented when the object is destroyed.
///        The static ID counter also has a algorithmic problem defined below with 'CAUTION FOR STATIC ID COUNTER'
///     3. Rule of Zero is applied to all classes
///        accept for GeometrryObjject base class having a user defined special functions
///        due to the incrementation and decrementation requirement of the static ID counter.
///        An important discussion related to this issue is GlobalCoordSystem class.
///        The discussion is quite long, hence, refer to the docstring of GlobalCoordSystem header file.
///     4. Smart pointers used for the ownership.
///        Shared ownership is implemented on all objects in the library via std::shared_ptr.
///        For example, a Line object has an ownership on two Point3D objects through c_endPoint0 and c_endPoint1 members.
///        These point objects may be owned by other objects (e.g. an Axis object or another Line object).
///        
///        Exclusive ownership (std::unique_ptr) is not considered relevant for the implementation of Geometry Library.
///        Weak pointers (std::weak_ptr) are either not used.
///        An application of the weak pointers would be to count the shared ownership on an object.
///        This is actually required:
///            Consider a user of the final product (i.e. the GUI) wants to delete a point.
///            The forced delete operation by the user shall be canceled if any object has an ownership on that point.
///            Weak pointers could be utilized in this respect.
///            THIS SITUATION WILL BE STUDIED DETAILY IN THE FUTURE.
///            Currently, weak pointers are not used to save memory
///            Besides, a more optimistic solution (a special data structure?) can be determined.
/// 
///        Smart pointers are used in function arguments in order to transfer ownership into the function.
///        If not the case, the fundamental const reference approach (const T&) is followed.
///     5. Template and auto type deductions are studied carefully.
///        The initializer lists are not used together with auto types to simplify initializer list initializations.
///        Both of the C++11 and C++14 type deduced function declarations are used
///            C++11: auto identifier(args...) -> return_type
///            C++14: auto identifier(args...)  OR  decltype(auto) identifier(args...)
///     6. Rvalue references are considered (if reasonable) together with the lvalue references for optimization.
///        However, this library rarely has a separate function for the rvalue reference argument
///            Ex: GeometryObject::setName(std::string&& theName)
///        Instead, universal references are used mostly.
///            Ex: In Vector2D:
///                auto add(T&& theVector) const
///                ->std::shared_ptr<typename std::remove_const_t<std::remove_reference_t<decltype(theVector)>>>;
///     7. Universal references are used widely instead of creating separate functions for rvalue references.
///        Many functions rely on the universal references.
///        A fundamental problem with the rvalue references is
///        a result of the template type deduction together with the explicit constructors.
///        For example, consider the add function with a universal reference given in the 2nd example of previous item above.
///        That template function firstly inspects if the base type of the input parameter is VectorBase.
///        Both Vector2D and Vector3D are acceptable.
///        And both have explicit ctors with a std::array<double, 3>.
///        Hence, in the client code, the compiler could not distinguish the type deduction
///        for an rvalue std::array<double, 3> input to the add template function.
///        It is realy hard to determine the cause of such a compiler error for a client developer.
///        
///        Keep in mind that, despite of having a similar functionality,
///        GeometryObject::Clone, does not use universal reference for the input argument
///        as it does not make sence to clone a temporary object.
///     8. Copy elision, RVO and NRVO studied carefully.
///        Most of the time, even standards on the issue differ between C++11 and C++17,
///        leaving the optimization to the compiler is mostly more efficient.
///        Explicit actions blocking the copy elision has held only in a few locations:
///            returning an rvalue reference with std::move
///            returning a universal reference with std::forward
///            returning with a trinary operator
///     9. Function invariants and preconditions are analyzed in detail.
///        Header file docstrings decribes the invariants
///        and docstring of some of the functions also describes the invariants and preconditions.
///        Exception definitions (and RAII) follow the invariants and preconditions.
/// 
///        For example, points and vectors are the invariants of axes and planes in the library.
///        In GeometryLibrary_OCCT, these classes also stores the Equation Coefficients (EC)
///        which are derived from the passing point and direction/normal vector.
///        This causes three problems:
///            1. Data duplication
///            2. More complexity is introduced into the exception determination
///            3. Increased code complexity
///        Hence, in GeometryLibrary_CPP11, EC values are not stored as a member anymore
///        but are calculated and returned when requested.
///        
///        Another point, which is more important, is that
///        Axis, Line, Circle and Plane objects have ownership on point and vector objects.
///        This is highly required in the parametric design of a geometry library.
///        Most of the CAE tools (e.g. Catia) support parametric design.
///        Consider, a line defined by two points.
///        Consider one of the points is updated.
///            1. Parametric Framework (Catia): Updates the line accordingly
///               Actually, the data of the line is not updated.
///               Only, the visual representation of the line on the GUI is updated.
///            2. Non-parametric Framework (MSC.PATRAN): Does not update the line.
///        The reason of the above results is as follows:
///            1. Parametric Framework (Catia): Line object is defined by two point objects
///               Hence, the line is updated when points are updated.
///            2. Non-parametric Framework (MSC.PATRAN): Line object is defined by numeric data.
///               When the ctor of the line object is called with two points
///               the ctor calculates the required parameters to define the line by two points
///               and stores these numeric data into the new object instead of the points.
///               Hence, the line object and the point objects are independent.
///        Hence, the object ownership is crutial in order to have a parametric geometry library.
///    10. C++98 enums used in GeometryLibrary_OCCT are still in use in this library (GeometryLibrary_CPP11)
///        as a quite long time is required to update
///        the library for the new enum class of C++11
///        because enum variables are used in too many locations as integer variables.
///    11. The source files (e.g. Axis.cxx) includes all headers
///        and the header files are include guarded (i.e. #ifndef directive).
///        This is the current strategy which is quite easy to compile the library without linking errors.
///        However, this approach creates too much code at the end of the preprocess
///        due to the inclusion of all headers some of which are redundant for the source file.
///        The header file include directives will be rearranged for each source file ASAP.
///    12. The interface base class ReferenceAbstractObject in GeometryLibrary_OCCT
///        is removed to have a simple class hyerarchy as it was totally redundant.
///    13. Protected class members in GeometryLibrary_OCCT is made private in this library for encapsulation.
///        As is well known, protected variables are accessible by just simple inheritance
///        and this breaks LSP (Liskov Substitution Principle), OCP (Open-Closed Principle).
/// 
/// 
/// 
/// B. DEFINITION OF THE GEOMETRY LIBRARY:
/// 
/// This library is a primitive geometry library
/// which enables 2D to 3D (or vice versa) switch.
/// Contains the fundamental variables only:
/// Coord Systems (CS), a unique global CS, points, vectors, axes, lines, circles and planes.
/// Points and vectors are ReferenceObject types which are defined wrt a CS.
/// ReferenceObject instances can be 2D or 3D whereas the other types (e.g. an axis or plane)
/// are default 3D objects.
/// Complex geometries (e.g. a surface) are not implemented.
/// 
/// 
/// 
/// GeometryObject is the implementation base class for all types in the library.
/// It holds an ID (an internal ID) and name (for the use of the end users) members.
/// 
/// CAUTION FOR STATIC ID COUNTER:
///   GeometryObject stores a static member to hold the last used ID for any object.
///   An important issue to note is that the non-static ID of an object is coppied
///   with the default copy and move operations.
///   Hence, default copying of an object results with two objects having the same ID.
///   This is solved easily by user defined copy ctor and assignment functions.
///   The problem here is the temporary objects.
///   In the geometrical operations many temporary objects are created.
///   For example, creating a circle from three points generates lines and axes which are temporary.
///   The static ID counter is incremented firstly for the temporary objects and then for the circle object.
///   The temporaries are deleted when the circle ctor reaches the end
///   and the static ID counter is decremented for them.
///   Suppose at the beginning of the circle ctor, the static ID counter is 100
///   and suppose in the ctor we created 3 temporary objects.
///   Hence, the ID for the new circle object will be 104
///   but the static ID counter will be 101.
///   Hence, we need to inform the GeometryObject class whether the new object is a temporary or not.
///   THIS WILL BE IMPLEMENTED LATER.
/// 
/// Additionally, GeometryObject holds two non-static tolerance members to be used in the calculations.
/// The use of the tolerance consists of two cases:
///     1. To eliminate any kind of computational errors (e.g. truncation errors),
///     2. To be able to perform approximate calculations.
///        For example, intersection of two line may not exist theoritically
///        but an approximate point can be found.
///        A tolerance value is required for such approximations.
/// 
/// 
/// 
/// ReferenceObject is the base class for CS dependent objects (i.e. points and vectors).
/// It owns a CS member.
/// The geometry basically defined wrt to coordinate systems (CSs) in order to
///   1. simplify the tracebility of the objects
///   2. switch between spaces, especially 3D to 2D (or 2D to 3D)
/// The 1st functionality is a fundamental issue in engineering applications.
/// For example, an assembly of bodies is defined in a global CS
/// while each body has its own CS.
/// The 2nd functionality is similar to the 1st one.
/// Its benefit is more clear when it comes to switching between 2D and 3D spaces.
/// All CAE software (e.g. Catia) supports switching to 2D space.
/// This library can be utilized in this respect.
/// 
/// The z dimension (i.e. coord for a point and component for a vector) is zero for 2D objects by default.
/// However, the object does not have to be defined wrt the global CS.
/// If a CS other than the global CS is defined as the reference CS of a 2D object,
/// the object has x and y dimensions but no z-dimension wrt that CS.
/// 
/// Reference CS to global CS (or vice versa) transformations are supported.
/// 
/// Global CS is a singleton class.
/// See GlobalCoordSystem.hxx for the details
/// 
/// 
/// 
/// Axis, Line, Circle and Plane classes inherit from the base class (GeometryObject)
/// and do not have 2D and 3D types (e.g. Axis2D).
/// Actually, only the classes inheritting from ReferenceObject have 2D and 3D types.
/// The problem is not 2D/3D types but the reference CS.
/// An Axis cannot have a reference CS
/// because it has two members (point and vector)
/// and the reference CSs of the two may not be the same.
/// This can be satisfied as a precondition in the ctors of Axis
/// but the reference CSs of the point and vector members can be modified
/// after the Axis object instantiation.
/// Hence, setReferenceCoordSystem method of ReferenceObject shall be removed
/// in order for Axis to have a reference CS
/// But this solution is not preferable.
/// Hence, the types with more than one ReferenceObject members (Axis, Line, Circle and Plane)
/// do not have a reference CS and 2D/3D types
/// and inherit from the root class (GeometryObject).
/// Instead, they have three member functions:
/// is2D, is3D and getCommonReferenceCoordSystem.
/// 
/// 
/// 
/// The objects in the library are defined in an implementation hyerarchy.
/// The slicing problem that comes with the inheritance is
/// solved by using pointers and references.
/// THE CLIENTS OF THE LIBRARY SHOULD PAY ATTENTION ON THIS BASIC RULE.
/// 
/// 
/// 
/// 
/// 
/// author: baris.albayrak.ieee@gmail.com
/// github: https://github.com/BarisAlbayrakIEEE/cpp.git
/// </summary>

#pragma warning(disable : 4290)

#ifndef _GeometryObject_HeaderFile
#define _GeometryObject_HeaderFile

#include <cmath>
#include <string>
#include <array>
#include <vector>
#include <map>
#include <limits>
#include <memory>
#include <utility>
#include <type_traits>
#include <boost/type_index.hpp>
#include <boost/algorithm/string.hpp>

#ifndef _GeometryParameters_HeaderFile
#include "GeometryParameters.hxx"
#endif
#ifndef _GeometryMath_HeaderFile
#include "GeometryMath.hxx"
#endif
#ifndef _GeometryException_HeaderFile
#include "GeometryException.hxx"
#endif
#ifndef _Macros_HeaderFile
#include "Macros.h"
#endif

namespace GeometryNamespace {
	class GeometryObject;
	class GeometryMath;
	class GeometryException;
	class ReferenceObject;
	class CoordSystem;
	class GlobalCoordSystem;
	class PointBase;
	class Point2D;
	class Point3D;
	class VectorBase;
	class Vector2D;
	class Vector3D;
	class Axis;
	class Line;
	class Circle;
	class Plane;

	class GeometryObject
	{
		// Members
		static long int c_IDCounter;
		std::string c_name = "";
		long int c_ID = 0;
		double c_toleranceGeneral = TOLERANCE_GENERAL;
		double c_toleranceSensitive = TOLERANCE_SENSITIVE;

	protected:
		// ctor / dtor / operators
		GeometryObject() noexcept;
		GeometryObject(
			const double theToleranceGeneral,
			const double theToleranceSensitive) noexcept;

	public:
		GeometryObject(const GeometryObject& rhs);
		GeometryObject& operator=(const GeometryObject& rhs);
		GeometryObject(GeometryObject&& rhs) noexcept = default;
		GeometryObject& operator=(GeometryObject&& rhs) noexcept = default;
		virtual ~GeometryObject() { GeometryObject::c_IDCounter--; }; // Decrement the static counter

		inline bool operator==(const GeometryObject&) const { return true; }; // Exclude ID, name and tolerance values
		inline bool operator!=(const GeometryObject&) const { return true; }; // Exclude ID, name and tolerance values

		inline std::string getName() const noexcept { return c_name; };
		inline long int getID() const { return c_ID; };
		inline void setName(const std::string& theName) { c_name = theName; }; // Lvalue setter
		inline void setName(std::string&& theName) { c_name = std::move(theName); }; // Rvalue setter
		inline void setID(const long int& theID) { c_ID = theID; };

	protected:
		// Methods
		double getToleranceGeneral() const;
		double getToleranceSensitive() const;
		void setToleranceGeneral(const double& theToleranceGeneral);
		void setToleranceSensitive(const double& theToleranceSensitive);
		static bool inspectReferenceCoordSystems(
			ARGCOPY(ReferenceObject) theReference0,
			ARGCOPY(ReferenceObject) theReference1);

		void setIDName();
		static void incrementID();
		static void decrementID();
		template<typename T>
		static T Clone(const T& arg);
		template<typename T>
		inline std::string getTypeName(T&&) const
        {
            using boost::typeindex::type_id;

            std::string prettyName = type_id<T>().pretty_name();
            std::vector<std::string> splits;
            boost::split(splits, prettyName, boost::is_any_of("\t "));
			std::string outType = splits[1];
			if (outType == "") {
				return "GeometryObject";
			}
			return outType;
        }
	};
}

#endif
